**D·ª± √Ån: Math Flash Cards**

---

## 1. Gi·ªõi Thi·ªáu
**Math Flash Cards** l√† m·ªôt tr√≤ ch∆°i gi√°o d·ª•c gi√∫p ng∆∞·ªùi ch∆°i r√®n luy·ªán k·ªπ nƒÉng to√°n h·ªçc th√¥ng qua c√°c th·∫ª b√†i c√¢u h·ªèi ng·∫´u nhi√™n. Tr√≤ ch∆°i nh·∫Øm ƒë·∫øn h·ªçc sinh ti·ªÉu h·ªçc v√† trung h·ªçc c∆° s·ªü, gi√∫p h·ªç c·∫£i thi·ªán kh·∫£ nƒÉng t√≠nh to√°n nhanh ch√≥ng theo m·ªôt c√°ch th√∫ v·ªã.

## 2. M·ª•c Ti√™u D·ª± √Ån
- T·∫°o m·ªôt tr√≤ ch∆°i to√°n h·ªçc ƒë∆°n gi·∫£n nh∆∞ng hi·ªáu qu·∫£ ƒë·ªÉ c·∫£i thi·ªán kh·∫£ nƒÉng t√≠nh to√°n.
- H·ªó tr·ª£ c√°c ph√©p to√°n c∆° b·∫£n: C·ªông, Tr·ª´, Nh√¢n, Chia.
- Cung c·∫•p tr·∫£i nghi·ªám th√¢n thi·ªán, d·ªÖ s·ª≠ d·ª•ng tr√™n tr√¨nh duy·ªát web.
- Theo d√µi ti·∫øn ƒë·ªô v√† ƒëi·ªÉm s·ªë c·ªßa ng∆∞·ªùi ch∆°i.
- T·∫°o giao di·ªán sinh ƒë·ªông, h·∫•p d·∫´n ƒë·ªÉ thu h√∫t h·ªçc sinh.

## 3. ƒê·ªëi T∆∞·ª£ng Ng∆∞·ªùi D√πng
- M·ªçi ƒë·ªëi t∆∞·ª£ng ƒë·∫∑c bi·ªát l√† nh·ªØng h·ªçc sinh ƒëang h·ªçc c√°c ph√©p to√°n c∆° b·∫£n.
- Gi√°o vi√™n v√† ph·ª• huynh mu·ªën gi√∫p tr·∫ª r√®n luy·ªán k·ªπ nƒÉng to√°n h·ªçc.
- B·∫•t k·ª≥ ai mu·ªën n√¢ng cao t·ªëc ƒë·ªô t√≠nh to√°n c·ªßa m√¨nh.

## 4. T√≠nh NƒÉng Ch√≠nh
- **Ch·∫ø ƒë·ªô ch∆°i:**
  - C√¢u h·ªèi ng·∫´u nhi√™n v·ªõi c√°c ph√©p to√°n c∆° b·∫£n.
  - Ph·∫°m vi t√≠nh to√°n l√† t·ª´ 0 - 9.
- **Giao di·ªán ƒë∆°n gi·∫£n, d·ªÖ s·ª≠ d·ª•ng:**
  - Hi·ªÉn th·ªã c√¢u h·ªèi v·ªõi b·ªën l·ª±a ch·ªçn ƒë√°p √°n.
  - Ng∆∞·ªùi ch∆°i ch·ªçn ƒë√°p √°n b·∫±ng c√°ch nh·∫•n v√†o th·∫ª b√†i.
- **H·ªá th·ªëng ƒëi·ªÉm s·ªë:**
  - C·ªông 1 ƒëi·ªÉm cho correct khi tr·∫£ l·ªùi ƒë√∫ng.
  - C·ªông 1 ƒëi·ªÉm cho incorrect khi tr·∫£ l·ªùi sai.
  - Hi·ªÉn th·ªã ƒëi·ªÉm s·ªë sau m·ªói l∆∞·ª£t ch∆°i.
- **Giao di·ªán ƒë·ªông, hi·ªáu ·ª©ng tr·ª±c quan:**
  - S·ª≠ d·ª•ng ho·∫°t ·∫£nh ƒë·ªÉ l√†m tƒÉng t√≠nh h·∫•p d·∫´n.
  - H·ªá th·ªëng ph·∫£n h·ªìi √¢m thanh khi ch·ªçn ƒë√∫ng/sai.

## 5. C√¥ng Ngh·ªá S·ª≠ D·ª•ng
- **Frontend:** HTML, CSS, JavaScript.
- **Th∆∞ vi·ªán h·ªó tr·ª£:** Phaser.js (ho·∫∑c Vanilla JavaScript n·∫øu kh√¥ng d√πng framework).
- **Backend (tu·ª≥ ch·ªçn n·∫øu c·∫ßn l∆∞u tr·ªØ d·ªØ li·ªáu ng∆∞·ªùi ch∆°i):** Node.js + Express.js.
- **C∆° s·ªü d·ªØ li·ªáu (n·∫øu c·∫ßn l∆∞u ƒëi·ªÉm s·ªë):** Firebase / MongoDB.

## 6. Giao Di·ªán D·ª± Ki·∫øn
- **M√†n h√¨nh:** Hi·ªÉn th·ªã ph√©p to√°n v·ªõi 5 ƒë√°p √°n. Th√™m hai nh√¢n v·∫≠t t∆∞·ª£ng tr∆∞ng bi·ªÉu l·ªô c·∫£m x√∫c khi tr·∫£ l·ªùi ƒë√∫ng/sai.

## 7. Ti·∫øn ƒê·ªô D·ª± Ki·∫øn
| Giai ƒëo·∫°n  | C√¥ng vi·ªác                        | Th·ªùi gian |
|------------|---------------------------------|-----------|
| Giai ƒëo·∫°n 1 | Ph√¢n t√≠ch y√™u c·∫ßu, thi·∫øt k·∫ø giao di·ªán  | 1 tu·∫ßn     |
| Giai ƒëo·∫°n 2 | Ph√°t tri·ªÉn ch·ª©c nƒÉng ch√≠nh (C·ªông, Tr·ª´, Nh√¢n, Chia) | 2 tu·∫ßn     |
| Giai ƒëo·∫°n 3 | Ho√†n thi·ªán giao di·ªán v√† hi·ªáu ·ª©ng  | 1 tu·∫ßn     |
| Giai ƒëo·∫°n 4 | Ki·ªÉm th·ª≠ v√† s·ª≠a l·ªói             | 1 tu·∫ßn     |
| Giai ƒëo·∫°n 5 | Tri·ªÉn khai v√† thu th·∫≠p ph·∫£n h·ªìi  | 1 tu·∫ßn     |

## 8. K·∫øt Lu·∫≠n
D·ª± √°n **Math Flash Cards** l√† m·ªôt tr√≤ ch∆°i gi√°o d·ª•c h·ªØu √≠ch, gi√∫p ng∆∞·ªùi ch∆°i r√®n luy·ªán k·ªπ nƒÉng to√°n h·ªçc m·ªôt c√°ch th√∫ v·ªã. V·ªõi giao di·ªán ƒë∆°n gi·∫£n, d·ªÖ s·ª≠ d·ª•ng v√† kh·∫£ nƒÉng m·ªü r·ªông trong t∆∞∆°ng lai, ƒë√¢y s·∫Ω l√† m·ªôt s·∫£n ph·∫©m h·ªØu √≠ch cho h·ªçc sinh v√† gi√°o vi√™n.

## M√¥ t·∫£ t·ªïng quan v·ªÅ game: 
Khi v√†o game, ng∆∞·ªùi ch∆°i s·∫Ω c√≥ b·ªën n√∫t b√™n ph·∫£i ƒë·ªÉ ch·ªçn lo·∫°i ph√©p t√≠nh. B√™n d∆∞·ªõi l√† nƒÉm ƒë√°p √°n ƒë·ªÉ l·ª±a ch·ªçn. Hai th√¥ng s·ªë Correct v√† Incorrect hi·ªÉn th·ªã ·ªü hai g√≥c tr√°i v√† ph·∫£i tr√™n c√πng, d√πng ƒë·ªÉ t√≠nh ƒëi·ªÉm s·ªë.

·ªû gi·ªØa m√†n h√¨nh l√† hai nh√¢n v·∫≠t ƒëang b√™ ph√©p t√≠nh. C√°c nh√¢n v·∫≠t n√†y c√≥ ba tr·∫°ng th√°i bi·ªÉu l·ªô c·∫£m x√∫c:

B√¨nh th∆∞·ªùng khi ch∆∞a l·ª±a ch·ªçn ƒë√°p √°n.
B·ªëi r·ªëi khi ch·ªçn sai.
Vui m·ª´ng khi ch·ªçn ƒë√∫ng.
Game s·∫Ω ti·∫øp t·ª•c di·ªÖn ra li√™n t·ª•c m√† kh√¥ng c√≥ menu kh·ªüi ƒë·ªông ‚Äî v√†o l√† ch∆°i ngay. Ph·∫°m vi t√≠nh to√°n m·∫∑c ƒë·ªãnh t·ª´ 0 ƒë·∫øn 9.

const RANDOM_COUNT_NUMBER = 5;
const RANDOM_NUMBER = Math.floor(Math.random() * 9) + 1;
const RANGE_MAX_NUMBER = 9;
const RANGE_MIN_NUMBER = 1;
var correctText;
var incorrectText;
var leftDude;
var rightDude;
// K√≠ch th∆∞·ªõc v√† v·ªã tr√≠ b·∫£ng
let boardX = 10; // V·ªã tr√≠ X
let boardY = 90; // V·ªã tr√≠ Y
let buttonSizeX = 100; // K√≠ch th∆∞·ªõc √¥ vu√¥ng
let buttonSizeY = 100;
let spacing = 0; // Kho·∫£ng c√°ch gi·ªØa c√°c √¥

class MathGame extends Phaser.Scene {
    constructor() {
        super({ key: 'MathGame' });
    }

    preload() {
        this.load.image('background', 'assets/background.png');
        this.load.image('card', 'assets/card.png');
        this.load.spritesheet('characters', 'assets/cast2.png', { frameWidth: 563, frameHeight: 395 });
    }

    create() {
        let bg = this.add.image(0, 0, 'background').setOrigin(0, 0);
        bg.setDisplaySize(this.sys.game.config.width, this.sys.game.config.height);
        this.add.image(385, 328, 'card');

        incorrectText = this.add.text(450, 16, 'Incorrect: 0', { fontSize: '32px', fill: '#000', fontFamily: 'Arial' });
        correctText = this.add.text(150, 16, 'Correct: 0', { fontSize: '32px', fill: '#000', fontFamily: 'Arial' });

        // T·∫°o m·ªôt th·∫ª <div> ch·ª©a ph√©p to√°n
        this.questionContainer = this.add.dom(385, 300).createFromHTML(`
            <div id="math-question" style="
                font-size: 64px;
                font-weight: bold;
                color: black;
                font-family: Arial;
                text-align: center;
                line-height: 1.2;
                width: fit-content;
            "></div>
        `);

    // G·∫°ch ngang d∆∞·ªõi d·∫•u "="
    this.underline = this.add.text(385, 390, "____", {
        fontSize: "80px",
        fontStyle: "bold",
        color: "#000",
        fontFamily: "Arial",
        align: "center"
    }).setOrigin(0.5);

    this.operationBoard = this.add.container(boardX, boardY);

    let operations = [
        { symbol: '+', type: 'add' },
        { symbol: '-', type: 'subtract' },
        { symbol: '√ó', type: 'multiply' },
        { symbol: '√∑', type: 'divide' }
    ];

    operations.forEach((operation, index) => {
        let yOffset = index * (buttonSizeY + spacing);

        let button = this.add.rectangle(0, yOffset, buttonSizeX, buttonSizeY, 0xffffff)
            .setStrokeStyle(2, 0x000000)
            .setOrigin(0, 0)
            .setInteractive({ useHandCursor: true }); // üñ±Ô∏è Con tr·ªè b√†n tay

        let text = this.add.text(buttonSizeX / 2, yOffset + buttonSizeY / 2, operation.symbol, {
            fontSize: '48px',
            fontStyle: 'bold',
            color: '#000'
        }).setOrigin(0.5);


        button.on('pointerdown', () => {
            setTimeout(() => {
                this.updateMathQuestion(operation.symbol);
            }, 100);
        });

         // üî• Hi·ªáu ·ª©ng khi di chu·ªôt v√†o
        button.on('pointerover', () => {
            button.setFillStyle(0xdddddd); // M√†u x√°m nh·∫°t khi hover
        });

        button.on('pointerout', () => {
            button.setFillStyle(0xffffff); // Quay l·∫°i m√†u tr·∫Øng khi r·ªùi chu·ªôt
        });

        this.operationBoard.add([button, text]);
    });

    this.add.existing(this.operationBoard);

        // T·∫°o ho·∫°t ·∫£nh nh√¢n v·∫≠t

        this.anims.create({
            key: 'character',
            frames: this.anims.generateFrameNumbers('characters', { start: 0, end: 8 }),
            frameRate: 1,
            repeat: -1
        });

        this.characters = this.add.sprite(383, 435, 'characters'); 

        // // Ch·∫°y animation
        // this.characters.play('character');

    }

    updateMathQuestion(symbol) {
        let [number1, number2] = generateNumbers(symbol);
        this.questionContainer.setHTML(`
            <div style="text-align: center; font-size: 64px; font-weight: bold; color: black;">
                ${number1} <br> ${symbol} <br> ${number2} <br>
                <hr style="width: 100px; border: 2px solid black;">
            </div>
        `);
        
    }   

}

const config = {
    type: Phaser.AUTO,
    width: 780,
    height: 777,
    scene: MathGame
};

const game = new Phaser.Game(config);

// T·∫°o ra c·∫∑p s·ªë 

function generateNumbers(operatorType) {
    let number1 = Math.floor(Math.random() * (RANGE_MAX_NUMBER - RANGE_MIN_NUMBER + 1)) + RANGE_MIN_NUMBER;
    let number2 = Math.floor(Math.random() * (RANGE_MAX_NUMBER - RANGE_MIN_NUMBER + 1)) + RANGE_MIN_NUMBER;

    if (operatorType === "-") {
        if (number1 < number2) [number1, number2] = [number2, number1];
    } else if (operatorType === "√∑") {
        let divisors = [];
        for (let i = 1; i <= number1; i++) {
            if (number1 % i === 0) divisors.push(i);
        }
        number2 = divisors[Math.floor(Math.random() * divisors.length)];
    }
    return [number1, number2];
}

// T·∫°o ra c√°c options

function generateValue(number1, number2, Type) {
    let answer;
    if (Type === "+") {
        answer = number1 + number2;
    } else if (Type === "-") {
        answer = number1 - number2;
    } else if (Type === "√ó") {
        answer = number1 * number2;
    } else {
        answer = number1 / number2;
    }

    let optionValues = [];
    const randomIndex = Math.floor(Math.random() * RANDOM_COUNT_NUMBER);

    for (let j = 0; j < RANDOM_COUNT_NUMBER; j++) {
        if (j === randomIndex) {
            optionValues.push(answer);
        } else {
            let randomAnswer;
            do {
                randomAnswer = answer + RANDOM_NUMBER;
            } while (optionValues.includes(randomAnswer));
            optionValues.push(randomAnswer);
        }
    }
    return optionValues;
}
